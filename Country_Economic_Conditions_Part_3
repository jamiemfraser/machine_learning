{"cells": [{"metadata": {"collapsed": true}, "cell_type": "markdown", "source": "# Country Economic Conditions for Cargo Carriers (Machine Learning with Classification Models)"}, {"metadata": {}, "cell_type": "markdown", "source": "This report is written from the point of view of a data scientist preparing a report to the Head of Analytics for a logistics company. The company needs information on economic and financial conditions is different countries, including data on their international trade, to be aware of any situations that could affect business."}, {"metadata": {}, "cell_type": "markdown", "source": "## Objective"}, {"metadata": {}, "cell_type": "markdown", "source": "The objective of this report is to determine what factors may be driving investment in a country. For our company, it is important to understand the drivers of global growth and investment, as it allows us to plan ahead for where there may be greater demand for cargo services in the future. We want to positions ourselves as the go-to logistics company globally. Positioning ourselves in growing trade hubs will serve the long-term strategic objectives of our global services."}, {"metadata": {}, "cell_type": "markdown", "source": "## Data Summary"}, {"metadata": {}, "cell_type": "markdown", "source": "This dataset is taken from the International Monetary Fund (IMF) data bank. It lists country-level economic and financial statistics from all countries globally. This includes data such as gross domestic product (GDP), inflation, exports and imports, and government borrowing and revenue. The data is given in either US Dollars, or local currency depending on the country and year. Some variables, like inflation and unemployment, are given as percentages."}, {"metadata": {}, "cell_type": "markdown", "source": "## Data Exploration"}, {"metadata": {}, "cell_type": "code", "source": "#Import required packages\nimport numpy as np\nimport pandas as pd\nfrom sklearn import linear_model\nfrom scipy import stats \nfrom numpy import *\nfrom scipy.stats.mstats import normaltest\nimport math\nfrom sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import (StandardScaler, \n                                   PolynomialFeatures)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.simplefilter(\"ignore\")", "execution_count": 12, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "#Import IMF World Economic Outlook Data from GitHub\nWEO = pd.read_csv('https://raw.githubusercontent.com/jamiemfraser/machine_learning/main/WEOApr2021all.csv')\nWEO=pd.DataFrame(WEO)\nWEO.head()", "execution_count": 13, "outputs": [{"output_type": "execute_result", "execution_count": 13, "data": {"text/plain": "  CountryCode      Country                Indicator  \\\n0         AFG  Afghanistan  Current account balance   \n1         AFG  Afghanistan  Current account balance   \n2         ALB      Albania  Current account balance   \n3         ALB      Albania  Current account balance   \n4         DZA      Algeria  Current account balance   \n\n                                               Notes           Units  \\\n0  Current account is all transactions other than...    U.S. dollars   \n1  Current account is all transactions other than...  Percent of GDP   \n2  Current account is all transactions other than...    U.S. dollars   \n3  Current account is all transactions other than...  Percent of GDP   \n4  Current account is all transactions other than...    U.S. dollars   \n\n      Scale   2000   2001    2002    2003  ...    2010    2011    2012   2013  \\\n0  Billions    NaN    NaN   1.481   1.348  ...   4.510   4.754   2.205  0.291   \n1       NaN    NaN    NaN  33.908  29.616  ...  29.430  26.574  10.864  1.444   \n2  Billions -0.246 -0.248  -0.443  -0.432  ...  -1.351  -1.666  -1.257 -1.183   \n3       NaN -7.070 -6.315 -10.179  -7.695  ... -11.321 -12.917 -10.202 -9.253   \n4  Billions  9.142  7.060   4.359   8.808  ...  12.157  19.802  12.290  0.835   \n\n     2014    2015    2016    2017    2018    2019  \n0   1.353   0.768   1.623   1.434   2.237   2.209  \n1   6.557   3.796   9.018   7.586  12.158  11.705  \n2  -1.430  -0.981  -0.898  -0.978  -1.024  -1.219  \n3 -10.797  -8.609  -7.572  -7.492  -6.758  -7.979  \n4  -9.436 -27.290 -26.473 -22.081 -16.706 -17.150  \n\n[5 rows x 26 columns]", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CountryCode</th>\n      <th>Country</th>\n      <th>Indicator</th>\n      <th>Notes</th>\n      <th>Units</th>\n      <th>Scale</th>\n      <th>2000</th>\n      <th>2001</th>\n      <th>2002</th>\n      <th>2003</th>\n      <th>...</th>\n      <th>2010</th>\n      <th>2011</th>\n      <th>2012</th>\n      <th>2013</th>\n      <th>2014</th>\n      <th>2015</th>\n      <th>2016</th>\n      <th>2017</th>\n      <th>2018</th>\n      <th>2019</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AFG</td>\n      <td>Afghanistan</td>\n      <td>Current account balance</td>\n      <td>Current account is all transactions other than...</td>\n      <td>U.S. dollars</td>\n      <td>Billions</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.481</td>\n      <td>1.348</td>\n      <td>...</td>\n      <td>4.510</td>\n      <td>4.754</td>\n      <td>2.205</td>\n      <td>0.291</td>\n      <td>1.353</td>\n      <td>0.768</td>\n      <td>1.623</td>\n      <td>1.434</td>\n      <td>2.237</td>\n      <td>2.209</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AFG</td>\n      <td>Afghanistan</td>\n      <td>Current account balance</td>\n      <td>Current account is all transactions other than...</td>\n      <td>Percent of GDP</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>33.908</td>\n      <td>29.616</td>\n      <td>...</td>\n      <td>29.430</td>\n      <td>26.574</td>\n      <td>10.864</td>\n      <td>1.444</td>\n      <td>6.557</td>\n      <td>3.796</td>\n      <td>9.018</td>\n      <td>7.586</td>\n      <td>12.158</td>\n      <td>11.705</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ALB</td>\n      <td>Albania</td>\n      <td>Current account balance</td>\n      <td>Current account is all transactions other than...</td>\n      <td>U.S. dollars</td>\n      <td>Billions</td>\n      <td>-0.246</td>\n      <td>-0.248</td>\n      <td>-0.443</td>\n      <td>-0.432</td>\n      <td>...</td>\n      <td>-1.351</td>\n      <td>-1.666</td>\n      <td>-1.257</td>\n      <td>-1.183</td>\n      <td>-1.430</td>\n      <td>-0.981</td>\n      <td>-0.898</td>\n      <td>-0.978</td>\n      <td>-1.024</td>\n      <td>-1.219</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ALB</td>\n      <td>Albania</td>\n      <td>Current account balance</td>\n      <td>Current account is all transactions other than...</td>\n      <td>Percent of GDP</td>\n      <td>NaN</td>\n      <td>-7.070</td>\n      <td>-6.315</td>\n      <td>-10.179</td>\n      <td>-7.695</td>\n      <td>...</td>\n      <td>-11.321</td>\n      <td>-12.917</td>\n      <td>-10.202</td>\n      <td>-9.253</td>\n      <td>-10.797</td>\n      <td>-8.609</td>\n      <td>-7.572</td>\n      <td>-7.492</td>\n      <td>-6.758</td>\n      <td>-7.979</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>DZA</td>\n      <td>Algeria</td>\n      <td>Current account balance</td>\n      <td>Current account is all transactions other than...</td>\n      <td>U.S. dollars</td>\n      <td>Billions</td>\n      <td>9.142</td>\n      <td>7.060</td>\n      <td>4.359</td>\n      <td>8.808</td>\n      <td>...</td>\n      <td>12.157</td>\n      <td>19.802</td>\n      <td>12.290</td>\n      <td>0.835</td>\n      <td>-9.436</td>\n      <td>-27.290</td>\n      <td>-26.473</td>\n      <td>-22.081</td>\n      <td>-16.706</td>\n      <td>-17.150</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 26 columns</p>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "#We are only interested in the most recent year for which data is available, 2019\nWEO=WEO.drop(['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018'], axis = 1)\n\n#Reshape the data so each country is one observation\nWEO=WEO.pivot_table(index=[\"Country\"], columns='Indicator', values='2019').reset_index()\nWEO.dropna(inplace=True)\nWEO.head()", "execution_count": 14, "outputs": [{"output_type": "execute_result", "execution_count": 14, "data": {"text/plain": "Indicator    Country  Current account balance  Employment  \\\n8          Australia                   4.9525      12.865   \n9            Austria                   7.7475       4.337   \n15           Belgium                   1.1055       4.978   \n30            Canada                 -18.8820      18.979   \n39            Cyprus                  -3.9415       0.416   \n\nIndicator  General government net lending/borrowing  \\\n8                                          -40.2135   \n9                                            1.6740   \n15                                          -5.6135   \n30                                           6.4965   \n39                                           0.8970   \n\nIndicator  General government revenue  General government total expenditure  \\\n8                            361.9895                              402.2025   \n9                            122.1255                              120.4515   \n15                           144.3515                              149.9650   \n30                           500.1590                              493.6625   \n39                            25.3930                               24.4965   \n\nIndicator  Gross domestic product per capita, constant prices  \\\n8                                                  63894.200    \n9                                                  49263.665    \n15                                                 45417.555    \n30                                                 52701.355    \n39                                                 32609.890    \n\nIndicator  Gross domestic product per capita, current prices  \\\n8                                               61831.413333   \n9                                               51270.103333   \n15                                              47458.873333   \n30                                              53147.910000   \n39                                              32056.303333   \n\nIndicator  Gross domestic product, constant prices  \\\n8                                         987.3780   \n9                                         187.7360   \n15                                        222.9465   \n30                                       1052.0805   \n39                                         12.3540   \n\nIndicator  Inflation, average consumer prices  Total investment  \\\n8                                     58.3800            22.544   \n9                                     65.7460            25.471   \n15                                    54.5075            24.952   \n30                                    68.9660            22.988   \n39                                    50.6670            19.687   \n\nIndicator  Unemployment rate  Volume of exports of goods and services  \\\n8                      5.150                                    3.313   \n9                      4.525                                    2.943   \n15                     5.358                                   -0.079   \n30                     5.733                                    1.267   \n39                     7.075                                   -0.408   \n\nIndicator  Volume of imports of goods and services  \n8                                           -1.004  \n9                                            2.448  \n15                                          -0.719  \n30                                           0.346  \n39                                           1.951  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Indicator</th>\n      <th>Country</th>\n      <th>Current account balance</th>\n      <th>Employment</th>\n      <th>General government net lending/borrowing</th>\n      <th>General government revenue</th>\n      <th>General government total expenditure</th>\n      <th>Gross domestic product per capita, constant prices</th>\n      <th>Gross domestic product per capita, current prices</th>\n      <th>Gross domestic product, constant prices</th>\n      <th>Inflation, average consumer prices</th>\n      <th>Total investment</th>\n      <th>Unemployment rate</th>\n      <th>Volume of exports of goods and services</th>\n      <th>Volume of imports of goods and services</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>Australia</td>\n      <td>4.9525</td>\n      <td>12.865</td>\n      <td>-40.2135</td>\n      <td>361.9895</td>\n      <td>402.2025</td>\n      <td>63894.200</td>\n      <td>61831.413333</td>\n      <td>987.3780</td>\n      <td>58.3800</td>\n      <td>22.544</td>\n      <td>5.150</td>\n      <td>3.313</td>\n      <td>-1.004</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Austria</td>\n      <td>7.7475</td>\n      <td>4.337</td>\n      <td>1.6740</td>\n      <td>122.1255</td>\n      <td>120.4515</td>\n      <td>49263.665</td>\n      <td>51270.103333</td>\n      <td>187.7360</td>\n      <td>65.7460</td>\n      <td>25.471</td>\n      <td>4.525</td>\n      <td>2.943</td>\n      <td>2.448</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Belgium</td>\n      <td>1.1055</td>\n      <td>4.978</td>\n      <td>-5.6135</td>\n      <td>144.3515</td>\n      <td>149.9650</td>\n      <td>45417.555</td>\n      <td>47458.873333</td>\n      <td>222.9465</td>\n      <td>54.5075</td>\n      <td>24.952</td>\n      <td>5.358</td>\n      <td>-0.079</td>\n      <td>-0.719</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Canada</td>\n      <td>-18.8820</td>\n      <td>18.979</td>\n      <td>6.4965</td>\n      <td>500.1590</td>\n      <td>493.6625</td>\n      <td>52701.355</td>\n      <td>53147.910000</td>\n      <td>1052.0805</td>\n      <td>68.9660</td>\n      <td>22.988</td>\n      <td>5.733</td>\n      <td>1.267</td>\n      <td>0.346</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>Cyprus</td>\n      <td>-3.9415</td>\n      <td>0.416</td>\n      <td>0.8970</td>\n      <td>25.3930</td>\n      <td>24.4965</td>\n      <td>32609.890</td>\n      <td>32056.303333</td>\n      <td>12.3540</td>\n      <td>50.6670</td>\n      <td>19.687</td>\n      <td>7.075</td>\n      <td>-0.408</td>\n      <td>1.951</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "WEO.columns = ['Country', 'Current_account', 'Employment', 'Net_borrowing', 'Government_revenue', 'Government_expenditure', 'GDP_percap_constant', 'GDP_percap_current', 'GDP_constant', 'Inflation', 'Investment', 'Unemployment', 'Volume_exports', 'Volume_imports']\nWEO.head()", "execution_count": 15, "outputs": [{"output_type": "execute_result", "execution_count": 15, "data": {"text/plain": "      Country  Current_account  Employment  Net_borrowing  Government_revenue  \\\n8   Australia           4.9525      12.865       -40.2135            361.9895   \n9     Austria           7.7475       4.337         1.6740            122.1255   \n15    Belgium           1.1055       4.978        -5.6135            144.3515   \n30     Canada         -18.8820      18.979         6.4965            500.1590   \n39     Cyprus          -3.9415       0.416         0.8970             25.3930   \n\n    Government_expenditure  GDP_percap_constant  GDP_percap_current  \\\n8                 402.2025            63894.200        61831.413333   \n9                 120.4515            49263.665        51270.103333   \n15                149.9650            45417.555        47458.873333   \n30                493.6625            52701.355        53147.910000   \n39                 24.4965            32609.890        32056.303333   \n\n    GDP_constant  Inflation  Investment  Unemployment  Volume_exports  \\\n8       987.3780    58.3800      22.544         5.150           3.313   \n9       187.7360    65.7460      25.471         4.525           2.943   \n15      222.9465    54.5075      24.952         5.358          -0.079   \n30     1052.0805    68.9660      22.988         5.733           1.267   \n39       12.3540    50.6670      19.687         7.075          -0.408   \n\n    Volume_imports  \n8           -1.004  \n9            2.448  \n15          -0.719  \n30           0.346  \n39           1.951  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Current_account</th>\n      <th>Employment</th>\n      <th>Net_borrowing</th>\n      <th>Government_revenue</th>\n      <th>Government_expenditure</th>\n      <th>GDP_percap_constant</th>\n      <th>GDP_percap_current</th>\n      <th>GDP_constant</th>\n      <th>Inflation</th>\n      <th>Investment</th>\n      <th>Unemployment</th>\n      <th>Volume_exports</th>\n      <th>Volume_imports</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>Australia</td>\n      <td>4.9525</td>\n      <td>12.865</td>\n      <td>-40.2135</td>\n      <td>361.9895</td>\n      <td>402.2025</td>\n      <td>63894.200</td>\n      <td>61831.413333</td>\n      <td>987.3780</td>\n      <td>58.3800</td>\n      <td>22.544</td>\n      <td>5.150</td>\n      <td>3.313</td>\n      <td>-1.004</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Austria</td>\n      <td>7.7475</td>\n      <td>4.337</td>\n      <td>1.6740</td>\n      <td>122.1255</td>\n      <td>120.4515</td>\n      <td>49263.665</td>\n      <td>51270.103333</td>\n      <td>187.7360</td>\n      <td>65.7460</td>\n      <td>25.471</td>\n      <td>4.525</td>\n      <td>2.943</td>\n      <td>2.448</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Belgium</td>\n      <td>1.1055</td>\n      <td>4.978</td>\n      <td>-5.6135</td>\n      <td>144.3515</td>\n      <td>149.9650</td>\n      <td>45417.555</td>\n      <td>47458.873333</td>\n      <td>222.9465</td>\n      <td>54.5075</td>\n      <td>24.952</td>\n      <td>5.358</td>\n      <td>-0.079</td>\n      <td>-0.719</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Canada</td>\n      <td>-18.8820</td>\n      <td>18.979</td>\n      <td>6.4965</td>\n      <td>500.1590</td>\n      <td>493.6625</td>\n      <td>52701.355</td>\n      <td>53147.910000</td>\n      <td>1052.0805</td>\n      <td>68.9660</td>\n      <td>22.988</td>\n      <td>5.733</td>\n      <td>1.267</td>\n      <td>0.346</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>Cyprus</td>\n      <td>-3.9415</td>\n      <td>0.416</td>\n      <td>0.8970</td>\n      <td>25.3930</td>\n      <td>24.4965</td>\n      <td>32609.890</td>\n      <td>32056.303333</td>\n      <td>12.3540</td>\n      <td>50.6670</td>\n      <td>19.687</td>\n      <td>7.075</td>\n      <td>-0.408</td>\n      <td>1.951</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "#Generate boolean variable for investment, indicatng whether investment is higher or lower than global mean\nWEO.describe()\n\n#Global mean for investment is 23.094944\nWEO['InvestMean'] = np.where(WEO['Investment'] >=23.094944, 1, 0)\nWEO = WEO.drop([\"Country\", \"Volume_exports\", \"Volume_imports\", \"GDP_percap_current\", \"Government_revenue\", \"Government_expenditure\", \"Employment\", \"Unemployment\"], axis=1)\nWEO.head()", "execution_count": 16, "outputs": [{"output_type": "execute_result", "execution_count": 16, "data": {"text/plain": "    Current_account  Net_borrowing  GDP_percap_constant  GDP_constant  \\\n8            4.9525       -40.2135            63894.200      987.3780   \n9            7.7475         1.6740            49263.665      187.7360   \n15           1.1055        -5.6135            45417.555      222.9465   \n30         -18.8820         6.4965            52701.355     1052.0805   \n39          -3.9415         0.8970            32609.890       12.3540   \n\n    Inflation  Investment  InvestMean  \n8     58.3800      22.544           0  \n9     65.7460      25.471           1  \n15    54.5075      24.952           1  \n30    68.9660      22.988           0  \n39    50.6670      19.687           0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Current_account</th>\n      <th>Net_borrowing</th>\n      <th>GDP_percap_constant</th>\n      <th>GDP_constant</th>\n      <th>Inflation</th>\n      <th>Investment</th>\n      <th>InvestMean</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>4.9525</td>\n      <td>-40.2135</td>\n      <td>63894.200</td>\n      <td>987.3780</td>\n      <td>58.3800</td>\n      <td>22.544</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>7.7475</td>\n      <td>1.6740</td>\n      <td>49263.665</td>\n      <td>187.7360</td>\n      <td>65.7460</td>\n      <td>25.471</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1.1055</td>\n      <td>-5.6135</td>\n      <td>45417.555</td>\n      <td>222.9465</td>\n      <td>54.5075</td>\n      <td>24.952</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>-18.8820</td>\n      <td>6.4965</td>\n      <td>52701.355</td>\n      <td>1052.0805</td>\n      <td>68.9660</td>\n      <td>22.988</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>-3.9415</td>\n      <td>0.8970</td>\n      <td>32609.890</td>\n      <td>12.3540</td>\n      <td>50.6670</td>\n      <td>19.687</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "WEO.dtypes", "execution_count": 17, "outputs": [{"output_type": "execute_result", "execution_count": 17, "data": {"text/plain": "Current_account        float64\nNet_borrowing          float64\nGDP_percap_constant    float64\nGDP_constant           float64\nInflation              float64\nInvestment             float64\nInvestMean               int64\ndtype: object"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "#Describe the distribution of InvestMean variable\nWEO.InvestMean.hist()\n\n#We now have the target variable as a boolean, where 1 = True and 0 = False, for use in classifer models", "execution_count": 18, "outputs": [{"output_type": "execute_result", "execution_count": 18, "data": {"text/plain": "<AxesSubplot:>"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "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\n"}, "metadata": {"needs_background": "light"}}]}, {"metadata": {}, "cell_type": "code", "source": "# Calculate the correlation values\nfeature_cols = WEO.columns[0:4]\ncorr_values = WEO[feature_cols].corr()\n# Simplify by emptying all the data below the diagonal\ntril_index = np.tril_indices_from(corr_values)\n# Make the unused values NaNs\nfor coord in zip(*tril_index):\n     corr_values.iloc[coord[0], coord[1]] = np.NaN\n# Stack the data and convert to a data frame\ncorr_values = (corr_values\n               .stack()\n               .to_frame()\n               .reset_index()\n               .rename(columns={'level_0':'feature1',\n                                'level_1':'feature2',\n                                0:'correlation'}))\ncorr_values['abs_correlation'] = corr_values.correlation.abs()", "execution_count": 19, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "#Sort the correlation values from largest to smallest\ncorr_values.sort_values('correlation', ascending=False).query('abs_correlation>=0.0')", "execution_count": 20, "outputs": [{"output_type": "execute_result", "execution_count": 20, "data": {"text/plain": "              feature1             feature2  correlation  abs_correlation\n5  GDP_percap_constant         GDP_constant     0.961999         0.961999\n3        Net_borrowing  GDP_percap_constant     0.290932         0.290932\n2      Current_account         GDP_constant     0.159692         0.159692\n4        Net_borrowing         GDP_constant     0.122077         0.122077\n1      Current_account  GDP_percap_constant     0.119236         0.119236\n0      Current_account        Net_borrowing    -0.183452         0.183452", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature1</th>\n      <th>feature2</th>\n      <th>correlation</th>\n      <th>abs_correlation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>GDP_percap_constant</td>\n      <td>GDP_constant</td>\n      <td>0.961999</td>\n      <td>0.961999</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Net_borrowing</td>\n      <td>GDP_percap_constant</td>\n      <td>0.290932</td>\n      <td>0.290932</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Current_account</td>\n      <td>GDP_constant</td>\n      <td>0.159692</td>\n      <td>0.159692</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Net_borrowing</td>\n      <td>GDP_constant</td>\n      <td>0.122077</td>\n      <td>0.122077</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Current_account</td>\n      <td>GDP_percap_constant</td>\n      <td>0.119236</td>\n      <td>0.119236</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Current_account</td>\n      <td>Net_borrowing</td>\n      <td>-0.183452</td>\n      <td>0.183452</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "## Classifier Models"}, {"metadata": {}, "cell_type": "markdown", "source": "The three models that I will use for this analysis are\n\n1. Logistic regression\n2. K Nearest neighbors\n3. Decision Tree"}, {"metadata": {}, "cell_type": "markdown", "source": "### Model 1: Logistic regression"}, {"metadata": {}, "cell_type": "code", "source": "WEO.reset_index(inplace=True)\nWEO.sort_index()\nWEO.head()", "execution_count": 21, "outputs": [{"output_type": "execute_result", "execution_count": 21, "data": {"text/plain": "   index  Current_account  Net_borrowing  GDP_percap_constant  GDP_constant  \\\n0      8           4.9525       -40.2135            63894.200      987.3780   \n1      9           7.7475         1.6740            49263.665      187.7360   \n2     15           1.1055        -5.6135            45417.555      222.9465   \n3     30         -18.8820         6.4965            52701.355     1052.0805   \n4     39          -3.9415         0.8970            32609.890       12.3540   \n\n   Inflation  Investment  InvestMean  \n0    58.3800      22.544           0  \n1    65.7460      25.471           1  \n2    54.5075      24.952           1  \n3    68.9660      22.988           0  \n4    50.6670      19.687           0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>Current_account</th>\n      <th>Net_borrowing</th>\n      <th>GDP_percap_constant</th>\n      <th>GDP_constant</th>\n      <th>Inflation</th>\n      <th>Investment</th>\n      <th>InvestMean</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8</td>\n      <td>4.9525</td>\n      <td>-40.2135</td>\n      <td>63894.200</td>\n      <td>987.3780</td>\n      <td>58.3800</td>\n      <td>22.544</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9</td>\n      <td>7.7475</td>\n      <td>1.6740</td>\n      <td>49263.665</td>\n      <td>187.7360</td>\n      <td>65.7460</td>\n      <td>25.471</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>15</td>\n      <td>1.1055</td>\n      <td>-5.6135</td>\n      <td>45417.555</td>\n      <td>222.9465</td>\n      <td>54.5075</td>\n      <td>24.952</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>30</td>\n      <td>-18.8820</td>\n      <td>6.4965</td>\n      <td>52701.355</td>\n      <td>1052.0805</td>\n      <td>68.9660</td>\n      <td>22.988</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>39</td>\n      <td>-3.9415</td>\n      <td>0.8970</td>\n      <td>32609.890</td>\n      <td>12.3540</td>\n      <td>50.6670</td>\n      <td>19.687</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nWEO['InvestMean'] = le.fit_transform(WEO.InvestMean)\nWEO['InvestMean'].sample(5)", "execution_count": 25, "outputs": [{"output_type": "execute_result", "execution_count": 25, "data": {"text/plain": "34    0\n3     0\n13    0\n25    1\n24    1\nName: InvestMean, dtype: int64"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.model_selection import StratifiedShuffleSplit\n# Get the split indexes\nstrat_shuf_split = StratifiedShuffleSplit(n_splits=1, test_size=0.3, random_state=0)\ntrain_idx, test_idx = next(strat_shuf_split.split(WEO[feature_cols], WEO.InvestMean))\n# Create the dataframes\nX_train = WEO.loc[train_idx, feature_cols]\ny_train = WEO.loc[train_idx, 'InvestMean']\nX_test  = WEO.loc[test_idx, feature_cols]\ny_test  = WEO.loc[test_idx, 'InvestMean']\n\ny_train.value_counts(normalize=True)\ny_test.value_counts(normalize=True)", "execution_count": 26, "outputs": [{"output_type": "execute_result", "execution_count": 26, "data": {"text/plain": "0    0.545455\n1    0.454545\nName: InvestMean, dtype: float64"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "y_train.value_counts(normalize=True)\ny_test.value_counts(normalize=True)", "execution_count": 27, "outputs": [{"output_type": "execute_result", "execution_count": 27, "data": {"text/plain": "0    0.545455\n1    0.454545\nName: InvestMean, dtype: float64"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.linear_model import LogisticRegression\n# Standard logistic regression\nlr = LogisticRegression(solver='liblinear').fit(X_train, y_train)", "execution_count": 41, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "### Model 2: K-Nearest Neighbor"}, {"metadata": {}, "cell_type": "code", "source": "df_uniques = pd.DataFrame([[i, len(WEO[i].unique())] for i in WEO.columns], columns=['Variable', 'Unique Values']).set_index('Variable')\ndf_uniques", "execution_count": 45, "outputs": [{"output_type": "execute_result", "execution_count": 45, "data": {"text/plain": "                     Unique Values\nVariable                          \nindex                           36\nCurrent_account                 36\nNet_borrowing                   36\nGDP_percap_constant             36\nGDP_constant                    36\nInflation                       36\nInvestment                      36\nInvestMean                       2", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unique Values</th>\n    </tr>\n    <tr>\n      <th>Variable</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>index</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>Current_account</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>Net_borrowing</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>GDP_percap_constant</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>GDP_constant</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>Inflation</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>Investment</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>InvestMean</th>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.preprocessing import LabelBinarizer, LabelEncoder, OrdinalEncoder\nlb, le = LabelBinarizer(), LabelEncoder()\nWEO['InvestMean'] = lb.fit_transform(WEO['InvestMean'])", "execution_count": 48, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.preprocessing import MinMaxScaler\nmm = MinMaxScaler()\nfor column in [feature_cols]:\n    WEO[column] = mm.fit_transform(WEO[column])", "execution_count": 49, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, f1_score\ny, X = WEO['InvestMean'], WEO.drop(columns='InvestMean')\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)", "execution_count": 50, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "knn = KNeighborsClassifier(n_neighbors=3)\nknn = knn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(classification_report(y_test, y_pred))\nprint('Accuracy score: ', round(accuracy_score(y_test, y_pred), 2))\nprint('F1 Score: ', round(f1_score(y_test, y_pred), 2))", "execution_count": 51, "outputs": [{"output_type": "stream", "text": "              precision    recall  f1-score   support\n\n           0       0.57      0.36      0.44        11\n           1       0.12      0.25      0.17         4\n\n    accuracy                           0.33        15\n   macro avg       0.35      0.31      0.31        15\nweighted avg       0.45      0.33      0.37        15\n\nAccuracy score:  0.33\nF1 Score:  0.17\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Model 3: Decision Tree"}, {"metadata": {}, "cell_type": "code", "source": "import os, pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state=42)\ndt = dt.fit(X_train, y_train)\ndt.tree_.node_count, dt.tree_.max_depth", "execution_count": 62, "outputs": [{"output_type": "execute_result", "execution_count": 62, "data": {"text/plain": "(3, 1)"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "y_train.value_counts(normalize=True).sort_index()\ny_test.value_counts(normalize=True).sort_index()", "execution_count": 65, "outputs": [{"output_type": "execute_result", "execution_count": 65, "data": {"text/plain": "0    0.733333\n1    0.266667\nName: InvestMean, dtype: float64"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\ndef measure_error(y_true, y_pred, label):\n    return pd.Series({'accuracy':accuracy_score(y_true, y_pred),\n                      'precision': precision_score(y_true, y_pred),\n                      'recall': recall_score(y_true, y_pred),\n                      'f1': f1_score(y_true, y_pred)},\n                     name=label)", "execution_count": 66, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\ntrain_test_full_error = pd.concat([measure_error(y_train, y_train_pred, 'train'),\n                                   measure_error(y_test, y_test_pred, 'test')],\n                                  axis=1)\ntrain_test_full_error", "execution_count": 67, "outputs": [{"output_type": "execute_result", "execution_count": 67, "data": {"text/plain": "           train  test\naccuracy     1.0   1.0\nprecision    1.0   1.0\nrecall       1.0   1.0\nf1           1.0   1.0", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>train</th>\n      <th>test</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>accuracy</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>precision</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>recall</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>f1</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.model_selection import GridSearchCV\nparam_grid = {'max_depth':range(1, dt.tree_.max_depth+1, 2),\n              'max_features': range(1, len(dt.feature_importances_)+1)}\nGR = GridSearchCV(DecisionTreeClassifier(random_state=42),\n                  param_grid=param_grid,\n                  scoring='accuracy',\n                  n_jobs=-1)\nGR = GR.fit(X_train, y_train)\nGR.best_estimator_.tree_.node_count, GR.best_estimator_.tree_.max_depth", "execution_count": 70, "outputs": [{"output_type": "execute_result", "execution_count": 70, "data": {"text/plain": "(3, 1)"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "code", "source": "y_train_pred_gr = GR.predict(X_train)\ny_test_pred_gr = GR.predict(X_test)\ntrain_test_gr_error = pd.concat([measure_error(y_train, y_train_pred_gr, 'train'),\n                                 measure_error(y_test, y_test_pred_gr, 'test')],\n                                axis=1)\ntrain_test_gr_error", "execution_count": 72, "outputs": [{"output_type": "execute_result", "execution_count": 72, "data": {"text/plain": "           train  test\naccuracy     1.0   1.0\nprecision    1.0   1.0\nrecall       1.0   1.0\nf1           1.0   1.0", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>train</th>\n      <th>test</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>accuracy</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>precision</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>recall</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>f1</th>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Recommendation"}, {"metadata": {}, "cell_type": "markdown", "source": "Based on the results of the analysis above, I would suggest to use the decision tree classifier to achieve the best results."}, {"metadata": {}, "cell_type": "markdown", "source": "## Key Findings"}, {"metadata": {}, "cell_type": "markdown", "source": "The key finding of this analysis is that it suffers from a lack of data. There are too few data points to make a meaningful classification model that could be generalized. However, given the data that we have, I can say that it is clear there are many other factors that determine investment that are not captured by the data we have access to."}, {"metadata": {}, "cell_type": "markdown", "source": "## Next Steps"}, {"metadata": {}, "cell_type": "markdown", "source": "The next steps would be, if possible, to obtain further data that could complement what we already have. If not, then we would have to consider a different class of model to obtain the insights we need."}], "metadata": {"kernelspec": {"name": "python3", "display_name": "Python 3.8", "language": "python"}, "language_info": {"name": "python", "version": "3.8.10", "mimetype": "text/x-python", "codemirror_mode": {"name": "ipython", "version": 3}, "pygments_lexer": "ipython3", "nbconvert_exporter": "python", "file_extension": ".py"}}, "nbformat": 4, "nbformat_minor": 1}